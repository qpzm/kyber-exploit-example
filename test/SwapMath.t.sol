import "forge-std/Test.sol";

import "../contracts/libraries/SwapMath.sol";
import "../contracts/libraries/TickMath.sol";

contract SwapMathTest is Test {
    // This is sqrtP and tick after the first swap: 6.37 WETH -> 6.85 frxETH
    // Extract sqrtP, currentTick from the Swap event parameters
    // https://etherscan.io/tx/0x485e08dc2b6a4b3aeadcb89c3d18a37666dc7d9424961a2091d6b3696792f0f3#eventlog event#104
    function testSwap1() public {
        uint256 sqrtP = 20282409603651670423947251286016;
        assertEq(TickMath.getTickAtSqrtRatio(uint160(sqrtP)), 110909);
        uint256 sqrtP_tick_110909 = TickMath.getSqrtRatioAtTick(110909);
        assertEq(sqrtP_tick_110909, 20282314307052812369716185523481);
        assertLt(sqrtP_tick_110909, sqrtP);
    }

    // This is sqrtP and tick after the third swap: 0.0587 frxETH -> 396.244 WETH
    // event#164
    function testSwap3() public {
        uint256 sqrtP = 20482897903346086648868989510468;
        int24 tick = 111105;
        assertEq(TickMath.getTickAtSqrtRatio(uint160(sqrtP)), tick);
        uint256 sqrtP_tick = TickMath.getSqrtRatioAtTick(tick);
        assertEq(sqrtP_tick, 20482048097860156101637488433450);
        assertLt(sqrtP_tick, sqrtP);
    }

    function test_EstimateIncrementalLiquidity() public {
        // This is the parameters used in the exploit
        // https://explorer.phalcon.xyz/tx/eth/0x485e08dc2b6a4b3aeadcb89c3d18a37666dc7d9424961a2091d6b3696792f0f3?line=5015&debugLine=5015
        assertEq(SwapMath.estimateIncrementalLiquidity(387170294533119999999, 74694598994958027329, 20282409603651670423947251286016, 10, true, false), 75619198150999);

        // what if we add 1 to absDelta? Let's see in `test_CalcFinalPrice()`
        assertEq(SwapMath.estimateIncrementalLiquidity(387170294533120000000, 74694598994958027329, 20282409603651670423947251286016, 10, true, false), 75619198151000);
    }

    function test_CalcFinalPrice() public {
        // exploit: If deltaL is 75619198150999, then the tick of the final price is 111310
        uint256 sqrtP1 = SwapMath.calcFinalPrice(387170294533119999999, 74694598994958027329, 75619198150999, 20282409603651670423947251286016, true, false);
        int24 tick1 = TickMath.getTickAtSqrtRatio(uint160(sqrtP1));
        assertEq(sqrtP1, 20693058119558072255665971001964);
        assertEq(tick1, 111310);
        assertLt(TickMath.getSqrtRatioAtTick(111310), sqrtP1);

        // Update deltaL from 75619198150999 to 75619198151000
        // If deltaL is 75619198151000, then the tick of the final price is 111309
        uint256 sqrtP2 = SwapMath.calcFinalPrice(387170294533119999999, 74694598994958027329, 75619198151000, 20282409603651670423947251286016, true, false);
        int24 tick2 = TickMath.getTickAtSqrtRatio(uint160(sqrtP2));
        assertEq(sqrtP2, 20693058119558072255388935748427);
        assertEq(tick2, 111309);
        assertGt(TickMath.getSqrtRatioAtTick(111310), sqrtP2);
    }
}
